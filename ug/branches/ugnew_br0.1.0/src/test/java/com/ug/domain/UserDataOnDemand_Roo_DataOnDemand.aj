// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ug.domain;

import com.ug.domain.ProfileDataOnDemand;
import com.ug.domain.User;
import java.util.List;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UserDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserDataOnDemand: @Component;
    
    private Random UserDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<User> UserDataOnDemand.data;
    
    @Autowired
    private ProfileDataOnDemand UserDataOnDemand.profileDataOnDemand;
    
    public User UserDataOnDemand.getNewTransientUser(int index) {
        com.ug.domain.User obj = new com.ug.domain.User();
        obj.setFirstName("firstName_" + index);
        obj.setLastName("lastName_" + index);
        obj.setEmailAddress("emailAddress_" + index);
        obj.setPassword("password_" + index);
        obj.setActivationDate(new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime());
        obj.setActivationKey("activationKey_" + index);
        obj.setEnabled(Boolean.TRUE);
        obj.setLocked(Boolean.TRUE);
        obj.setProfile(profileDataOnDemand.getRandomProfile());
        return obj;
    }
    
    public User UserDataOnDemand.getSpecificUser(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        User obj = data.get(index);
        return User.findUser(obj.getId());
    }
    
    public User UserDataOnDemand.getRandomUser() {
        init();
        User obj = data.get(rnd.nextInt(data.size()));
        return User.findUser(obj.getId());
    }
    
    public boolean UserDataOnDemand.modifyUser(User obj) {
        return false;
    }
    
    public void UserDataOnDemand.init() {
        data = com.ug.domain.User.findUserEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'User' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.ug.domain.User>();
        for (int i = 0; i < 10; i++) {
            com.ug.domain.User obj = getNewTransientUser(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
