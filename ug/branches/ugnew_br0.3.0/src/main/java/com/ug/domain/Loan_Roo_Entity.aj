// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ug.domain;

import com.ug.domain.Loan;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Loan_Roo_Entity {
    
    declare @type: Loan: @Entity;
    
    declare @type: Loan: @Table(name = "loan");
    
    @PersistenceContext
    transient EntityManager Loan.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long Loan.id;
    
    public Long Loan.getId() {
        return this.id;
    }
    
    public void Loan.setId(Long id) {
        this.id = id;
    }
    
    @Transactional
    public void Loan.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Loan.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Loan attached = Loan.findLoan(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Loan.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Loan.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Loan Loan.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Loan merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Loan.entityManager() {
        EntityManager em = new Loan().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Loan.countLoans() {
        return entityManager().createQuery("select count(o) from Loan o", Long.class).getSingleResult();
    }
    
    public static List<Loan> Loan.findAllLoans() {
        return entityManager().createQuery("select o from Loan o", Loan.class).getResultList();
    }
    
    public static Loan Loan.findLoan(Long id) {
        if (id == null) return null;
        return entityManager().find(Loan.class, id);
    }
    
    public static List<Loan> Loan.findLoanEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("select o from Loan o", Loan.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
