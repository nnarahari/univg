// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ug.domain;

import com.ug.domain.Corporate;
import com.ug.domain.CorporateLoanAmount;
import com.ug.domain.User;
import java.lang.String;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Corporate_Roo_Finder {
    
    public static TypedQuery<Corporate> Corporate.findCorporatesByCorporateLoanAmounts(Set<CorporateLoanAmount> corporateLoanAmounts) {
        if (corporateLoanAmounts == null) throw new IllegalArgumentException("The corporateLoanAmounts argument is required");
        EntityManager em = Corporate.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT Corporate FROM Corporate AS corporate WHERE");
        for (int i = 0; i < corporateLoanAmounts.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :corporateLoanAmounts_item").append(i).append(" MEMBER OF corporate.corporateLoanAmounts");
        }
        TypedQuery<Corporate> q = em.createQuery(queryBuilder.toString(), Corporate.class);
        int corporateLoanAmountsIndex = 0;
        for (CorporateLoanAmount _corporateloanamount: corporateLoanAmounts) {
            q.setParameter("corporateLoanAmounts_item" + corporateLoanAmountsIndex++, _corporateloanamount);
        }
        return q;
    }
    
    public static TypedQuery<Corporate> Corporate.findCorporatesByCorporateName(String corporateName) {
        if (corporateName == null || corporateName.length() == 0) throw new IllegalArgumentException("The corporateName argument is required");
        EntityManager em = Corporate.entityManager();
        TypedQuery<Corporate> q = em.createQuery("SELECT Corporate FROM Corporate AS corporate WHERE corporate.corporateName = :corporateName", Corporate.class);
        q.setParameter("corporateName", corporateName);
        return q;
    }
    
    public static TypedQuery<Corporate> Corporate.findCorporatesByCorporateNameLike(String corporateName) {
        if (corporateName == null || corporateName.length() == 0) throw new IllegalArgumentException("The corporateName argument is required");
        corporateName = corporateName.replace('*', '%');
        if (corporateName.charAt(0) != '%') {
            corporateName = "%" + corporateName;
        }
        if (corporateName.charAt(corporateName.length() - 1) != '%') {
            corporateName = corporateName + "%";
        }
        EntityManager em = Corporate.entityManager();
        TypedQuery<Corporate> q = em.createQuery("SELECT Corporate FROM Corporate AS corporate WHERE LOWER(corporate.corporateName) LIKE LOWER(:corporateName)", Corporate.class);
        q.setParameter("corporateName", corporateName);
        return q;
    }
    
    public static TypedQuery<Corporate> Corporate.findCorporatesByCorporatePrimaryContact(String corporatePrimaryContact) {
        if (corporatePrimaryContact == null || corporatePrimaryContact.length() == 0) throw new IllegalArgumentException("The corporatePrimaryContact argument is required");
        EntityManager em = Corporate.entityManager();
        TypedQuery<Corporate> q = em.createQuery("SELECT Corporate FROM Corporate AS corporate WHERE corporate.corporatePrimaryContact = :corporatePrimaryContact", Corporate.class);
        q.setParameter("corporatePrimaryContact", corporatePrimaryContact);
        return q;
    }
    
    public static TypedQuery<Corporate> Corporate.findCorporatesByCorporatePrimaryContactLike(String corporatePrimaryContact) {
        if (corporatePrimaryContact == null || corporatePrimaryContact.length() == 0) throw new IllegalArgumentException("The corporatePrimaryContact argument is required");
        corporatePrimaryContact = corporatePrimaryContact.replace('*', '%');
        if (corporatePrimaryContact.charAt(0) != '%') {
            corporatePrimaryContact = "%" + corporatePrimaryContact;
        }
        if (corporatePrimaryContact.charAt(corporatePrimaryContact.length() - 1) != '%') {
            corporatePrimaryContact = corporatePrimaryContact + "%";
        }
        EntityManager em = Corporate.entityManager();
        TypedQuery<Corporate> q = em.createQuery("SELECT Corporate FROM Corporate AS corporate WHERE LOWER(corporate.corporatePrimaryContact) LIKE LOWER(:corporatePrimaryContact)", Corporate.class);
        q.setParameter("corporatePrimaryContact", corporatePrimaryContact);
        return q;
    }
    
    public static TypedQuery<Corporate> Corporate.findCorporatesByIndustry(String industry) {
        if (industry == null || industry.length() == 0) throw new IllegalArgumentException("The industry argument is required");
        EntityManager em = Corporate.entityManager();
        TypedQuery<Corporate> q = em.createQuery("SELECT Corporate FROM Corporate AS corporate WHERE corporate.industry = :industry", Corporate.class);
        q.setParameter("industry", industry);
        return q;
    }
    
    public static TypedQuery<Corporate> Corporate.findCorporatesByIndustryLike(String industry) {
        if (industry == null || industry.length() == 0) throw new IllegalArgumentException("The industry argument is required");
        industry = industry.replace('*', '%');
        if (industry.charAt(0) != '%') {
            industry = "%" + industry;
        }
        if (industry.charAt(industry.length() - 1) != '%') {
            industry = industry + "%";
        }
        EntityManager em = Corporate.entityManager();
        TypedQuery<Corporate> q = em.createQuery("SELECT Corporate FROM Corporate AS corporate WHERE LOWER(corporate.industry) LIKE LOWER(:industry)", Corporate.class);
        q.setParameter("industry", industry);
        return q;
    }
    
    public static TypedQuery<Corporate> Corporate.findCorporatesByMobile(String mobile) {
        if (mobile == null || mobile.length() == 0) throw new IllegalArgumentException("The mobile argument is required");
        EntityManager em = Corporate.entityManager();
        TypedQuery<Corporate> q = em.createQuery("SELECT Corporate FROM Corporate AS corporate WHERE corporate.mobile = :mobile", Corporate.class);
        q.setParameter("mobile", mobile);
        return q;
    }
    
    public static TypedQuery<Corporate> Corporate.findCorporatesByUserId(User userId) {
        if (userId == null) throw new IllegalArgumentException("The userId argument is required");
        EntityManager em = Corporate.entityManager();
        TypedQuery<Corporate> q = em.createQuery("SELECT Corporate FROM Corporate AS corporate WHERE corporate.userId = :userId", Corporate.class);
        q.setParameter("userId", userId);
        return q;
    }
    
    public static TypedQuery<Corporate> Corporate.findCorporatesByWorkPhone(String workPhone) {
        if (workPhone == null || workPhone.length() == 0) throw new IllegalArgumentException("The workPhone argument is required");
        EntityManager em = Corporate.entityManager();
        TypedQuery<Corporate> q = em.createQuery("SELECT Corporate FROM Corporate AS corporate WHERE corporate.workPhone = :workPhone", Corporate.class);
        q.setParameter("workPhone", workPhone);
        return q;
    }
    
    public static TypedQuery<Corporate> Corporate.findCorporatesByZip(String zip) {
        if (zip == null || zip.length() == 0) throw new IllegalArgumentException("The zip argument is required");
        EntityManager em = Corporate.entityManager();
        TypedQuery<Corporate> q = em.createQuery("SELECT Corporate FROM Corporate AS corporate WHERE corporate.zip = :zip", Corporate.class);
        q.setParameter("zip", zip);
        return q;
    }
    
}
