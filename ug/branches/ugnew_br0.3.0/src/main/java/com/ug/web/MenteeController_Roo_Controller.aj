// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ug.web;

import com.ug.domain.Country;
import com.ug.domain.Gender;
import com.ug.domain.Mentee;
import com.ug.domain.Profession;
import com.ug.domain.Programstudy;
import com.ug.domain.User;
import java.io.UnsupportedEncodingException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Collection;
import java.util.Date;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect MenteeController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String MenteeController.create(@Valid Mentee mentee, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("mentee", mentee);
            addDateTimeFormatPatterns(uiModel);
            return "mentees/create";
        }
        uiModel.asMap().clear();
        mentee.persist();
        return "redirect:/mentees/" + encodeUrlPathSegment(mentee.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String MenteeController.createForm(Model uiModel) {
        uiModel.addAttribute("mentee", new Mentee());
        addDateTimeFormatPatterns(uiModel);
        return "mentees/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String MenteeController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("mentee", Mentee.findMentee(id));
        uiModel.addAttribute("itemId", id);
        return "mentees/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String MenteeController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("mentees", Mentee.findMenteeEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Mentee.countMentees() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("mentees", Mentee.findAllMentees());
        }
        addDateTimeFormatPatterns(uiModel);
        return "mentees/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String MenteeController.update(@Valid Mentee mentee, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("mentee", mentee);
            addDateTimeFormatPatterns(uiModel);
            return "mentees/update";
        }
        uiModel.asMap().clear();
        mentee.merge();
        return "redirect:/mentees/" + encodeUrlPathSegment(mentee.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String MenteeController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("mentee", Mentee.findMentee(id));
        addDateTimeFormatPatterns(uiModel);
        return "mentees/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String MenteeController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Mentee.findMentee(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/mentees";
    }
    
    @RequestMapping(params = { "find=ByAttended", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByAttendedForm(Model uiModel) {
        return "mentees/findMenteesByAttended";
    }
    
    @RequestMapping(params = "find=ByAttended", method = RequestMethod.GET)
    public String MenteeController.findMenteesByAttended(@RequestParam("attended") String attended, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByAttended(attended).getResultList());
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByAttendedLike", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByAttendedLikeForm(Model uiModel) {
        return "mentees/findMenteesByAttendedLike";
    }
    
    @RequestMapping(params = "find=ByAttendedLike", method = RequestMethod.GET)
    public String MenteeController.findMenteesByAttendedLike(@RequestParam("attended") String attended, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByAttendedLike(attended).getResultList());
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByCitizenship", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByCitizenshipForm(Model uiModel) {
        uiModel.addAttribute("countrys", Country.findAllCountrys());
        return "mentees/findMenteesByCitizenship";
    }
    
    @RequestMapping(params = "find=ByCitizenship", method = RequestMethod.GET)
    public String MenteeController.findMenteesByCitizenship(@RequestParam("citizenship") Country citizenship, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByCitizenship(citizenship).getResultList());
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByCurrentProfession", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByCurrentProfessionForm(Model uiModel) {
        uiModel.addAttribute("professions", Profession.findAllProfessions());
        return "mentees/findMenteesByCurrentProfession";
    }
    
    @RequestMapping(params = "find=ByCurrentProfession", method = RequestMethod.GET)
    public String MenteeController.findMenteesByCurrentProfession(@RequestParam("currentProfession") Profession currentProfession, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByCurrentProfession(currentProfession).getResultList());
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByDateOfBirth", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByDateOfBirthForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "mentees/findMenteesByDateOfBirth";
    }
    
    @RequestMapping(params = "find=ByDateOfBirth", method = RequestMethod.GET)
    public String MenteeController.findMenteesByDateOfBirth(@RequestParam("dateOfBirth") @DateTimeFormat(style = "S-") Date dateOfBirth, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByDateOfBirth(dateOfBirth).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByDateOfBirthBetween", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByDateOfBirthBetweenForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "mentees/findMenteesByDateOfBirthBetween";
    }
    
    @RequestMapping(params = "find=ByDateOfBirthBetween", method = RequestMethod.GET)
    public String MenteeController.findMenteesByDateOfBirthBetween(@RequestParam("minDateOfBirth") @DateTimeFormat(style = "S-") Date minDateOfBirth, @RequestParam("maxDateOfBirth") @DateTimeFormat(style = "S-") Date maxDateOfBirth, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByDateOfBirthBetween(minDateOfBirth, maxDateOfBirth).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByDateOfBirthGreaterThan", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByDateOfBirthGreaterThanForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "mentees/findMenteesByDateOfBirthGreaterThan";
    }
    
    @RequestMapping(params = "find=ByDateOfBirthGreaterThan", method = RequestMethod.GET)
    public String MenteeController.findMenteesByDateOfBirthGreaterThan(@RequestParam("dateOfBirth") @DateTimeFormat(style = "S-") Date dateOfBirth, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByDateOfBirthGreaterThan(dateOfBirth).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByDateOfBirthLessThan", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByDateOfBirthLessThanForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "mentees/findMenteesByDateOfBirthLessThan";
    }
    
    @RequestMapping(params = "find=ByDateOfBirthLessThan", method = RequestMethod.GET)
    public String MenteeController.findMenteesByDateOfBirthLessThan(@RequestParam("dateOfBirth") @DateTimeFormat(style = "S-") Date dateOfBirth, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByDateOfBirthLessThan(dateOfBirth).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByDateOfBirthLessThanEquals", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByDateOfBirthLessThanEqualsForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "mentees/findMenteesByDateOfBirthLessThanEquals";
    }
    
    @RequestMapping(params = "find=ByDateOfBirthLessThanEquals", method = RequestMethod.GET)
    public String MenteeController.findMenteesByDateOfBirthLessThanEquals(@RequestParam("dateOfBirth") @DateTimeFormat(style = "S-") Date dateOfBirth, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByDateOfBirthLessThanEquals(dateOfBirth).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByEnabled", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByEnabledForm(Model uiModel) {
        return "mentees/findMenteesByEnabled";
    }
    
    @RequestMapping(params = "find=ByEnabled", method = RequestMethod.GET)
    public String MenteeController.findMenteesByEnabled(@RequestParam(value = "enabled", required = false) Boolean enabled, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByEnabled(enabled == null ? new Boolean(false) : enabled).getResultList());
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByEnabledNot", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByEnabledNotForm(Model uiModel) {
        return "mentees/findMenteesByEnabledNot";
    }
    
    @RequestMapping(params = "find=ByEnabledNot", method = RequestMethod.GET)
    public String MenteeController.findMenteesByEnabledNot(@RequestParam(value = "enabled", required = false) Boolean enabled, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByEnabledNot(enabled == null ? new Boolean(false) : enabled).getResultList());
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByGenderId", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByGenderIdForm(Model uiModel) {
        uiModel.addAttribute("genders", Gender.findAllGenders());
        return "mentees/findMenteesByGenderId";
    }
    
    @RequestMapping(params = "find=ByGenderId", method = RequestMethod.GET)
    public String MenteeController.findMenteesByGenderId(@RequestParam("genderId") Gender genderId, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByGenderId(genderId).getResultList());
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByHomePhone", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByHomePhoneForm(Model uiModel) {
        return "mentees/findMenteesByHomePhone";
    }
    
    @RequestMapping(params = "find=ByHomePhone", method = RequestMethod.GET)
    public String MenteeController.findMenteesByHomePhone(@RequestParam("homePhone") String homePhone, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByHomePhone(homePhone).getResultList());
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByHomePhoneIsNotNull", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByHomePhoneIsNotNullForm() {
        return "mentees/findMenteesByHomePhoneIsNotNull";
    }
    
    @RequestMapping(params = "find=ByHomePhoneIsNotNull", method = RequestMethod.GET)
    public String MenteeController.findMenteesByHomePhoneIsNotNull(Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByHomePhoneIsNotNull().getResultList());
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByHomePhoneIsNull", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByHomePhoneIsNullForm() {
        return "mentees/findMenteesByHomePhoneIsNull";
    }
    
    @RequestMapping(params = "find=ByHomePhoneIsNull", method = RequestMethod.GET)
    public String MenteeController.findMenteesByHomePhoneIsNull(Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByHomePhoneIsNull().getResultList());
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByHomePhoneLike", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByHomePhoneLikeForm(Model uiModel) {
        return "mentees/findMenteesByHomePhoneLike";
    }
    
    @RequestMapping(params = "find=ByHomePhoneLike", method = RequestMethod.GET)
    public String MenteeController.findMenteesByHomePhoneLike(@RequestParam("homePhone") String homePhone, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByHomePhoneLike(homePhone).getResultList());
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByLocked", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByLockedForm(Model uiModel) {
        return "mentees/findMenteesByLocked";
    }
    
    @RequestMapping(params = "find=ByLocked", method = RequestMethod.GET)
    public String MenteeController.findMenteesByLocked(@RequestParam(value = "locked", required = false) Boolean locked, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByLocked(locked == null ? new Boolean(false) : locked).getResultList());
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByLockedNot", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByLockedNotForm(Model uiModel) {
        return "mentees/findMenteesByLockedNot";
    }
    
    @RequestMapping(params = "find=ByLockedNot", method = RequestMethod.GET)
    public String MenteeController.findMenteesByLockedNot(@RequestParam(value = "locked", required = false) Boolean locked, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByLockedNot(locked == null ? new Boolean(false) : locked).getResultList());
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByLookingForMentor", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByLookingForMentorForm(Model uiModel) {
        return "mentees/findMenteesByLookingForMentor";
    }
    
    @RequestMapping(params = "find=ByLookingForMentor", method = RequestMethod.GET)
    public String MenteeController.findMenteesByLookingForMentor(@RequestParam(value = "lookingForMentor", required = false) Boolean lookingForMentor, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByLookingForMentor(lookingForMentor == null ? new Boolean(false) : lookingForMentor).getResultList());
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByLookingForMentorNot", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByLookingForMentorNotForm(Model uiModel) {
        return "mentees/findMenteesByLookingForMentorNot";
    }
    
    @RequestMapping(params = "find=ByLookingForMentorNot", method = RequestMethod.GET)
    public String MenteeController.findMenteesByLookingForMentorNot(@RequestParam(value = "lookingForMentor", required = false) Boolean lookingForMentor, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByLookingForMentorNot(lookingForMentor == null ? new Boolean(false) : lookingForMentor).getResultList());
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByMobile", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByMobileForm(Model uiModel) {
        return "mentees/findMenteesByMobile";
    }
    
    @RequestMapping(params = "find=ByMobile", method = RequestMethod.GET)
    public String MenteeController.findMenteesByMobile(@RequestParam("mobile") String mobile, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByMobile(mobile).getResultList());
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByMobileEquals", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByMobileEqualsForm(Model uiModel) {
        return "mentees/findMenteesByMobileEquals";
    }
    
    @RequestMapping(params = "find=ByMobileEquals", method = RequestMethod.GET)
    public String MenteeController.findMenteesByMobileEquals(@RequestParam("mobile") String mobile, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByMobileEquals(mobile).getResultList());
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByMobileIsNotNull", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByMobileIsNotNullForm() {
        return "mentees/findMenteesByMobileIsNotNull";
    }
    
    @RequestMapping(params = "find=ByMobileIsNotNull", method = RequestMethod.GET)
    public String MenteeController.findMenteesByMobileIsNotNull(Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByMobileIsNotNull().getResultList());
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByMobileIsNull", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByMobileIsNullForm() {
        return "mentees/findMenteesByMobileIsNull";
    }
    
    @RequestMapping(params = "find=ByMobileIsNull", method = RequestMethod.GET)
    public String MenteeController.findMenteesByMobileIsNull(Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByMobileIsNull().getResultList());
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByMobileLike", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByMobileLikeForm(Model uiModel) {
        return "mentees/findMenteesByMobileLike";
    }
    
    @RequestMapping(params = "find=ByMobileLike", method = RequestMethod.GET)
    public String MenteeController.findMenteesByMobileLike(@RequestParam("mobile") String mobile, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByMobileLike(mobile).getResultList());
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByProgramStudyId", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByProgramStudyIdForm(Model uiModel) {
        uiModel.addAttribute("programstudys", Programstudy.findAllProgramstudys());
        return "mentees/findMenteesByProgramStudyId";
    }
    
    @RequestMapping(params = "find=ByProgramStudyId", method = RequestMethod.GET)
    public String MenteeController.findMenteesByProgramStudyId(@RequestParam("programStudyId") Programstudy programStudyId, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByProgramStudyId(programStudyId).getResultList());
        return "mentees/list";
    }
    
    @RequestMapping(params = { "find=ByUserId", "form" }, method = RequestMethod.GET)
    public String MenteeController.findMenteesByUserIdForm(Model uiModel) {
        uiModel.addAttribute("users", User.findAllUsers());
        return "mentees/findMenteesByUserId";
    }
    
    @RequestMapping(params = "find=ByUserId", method = RequestMethod.GET)
    public String MenteeController.findMenteesByUserId(@RequestParam("userId") User userId, Model uiModel) {
        uiModel.addAttribute("mentees", Mentee.findMenteesByUserId(userId).getResultList());
        return "mentees/list";
    }
    
    @ModelAttribute("countrys")
    public Collection<Country> MenteeController.populateCountrys() {
        return Country.findAllCountrys();
    }
    
    @ModelAttribute("genders")
    public java.util.Collection<Gender> MenteeController.populateGenders() {
        return Gender.findAllGenders();
    }
    
    @ModelAttribute("mentees")
    public java.util.Collection<Mentee> MenteeController.populateMentees() {
        return Mentee.findAllMentees();
    }
    
    @ModelAttribute("professions")
    public java.util.Collection<Profession> MenteeController.populateProfessions() {
        return Profession.findAllProfessions();
    }
    
    @ModelAttribute("programstudys")
    public java.util.Collection<Programstudy> MenteeController.populateProgramstudys() {
        return Programstudy.findAllProgramstudys();
    }
    
    @ModelAttribute("users")
    public java.util.Collection<User> MenteeController.populateUsers() {
        return User.findAllUsers();
    }
    
    void MenteeController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("mentee_dateofbirth_date_format", org.joda.time.format.DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("mentee_mindateofbirth_date_format", org.joda.time.format.DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("mentee_maxdateofbirth_date_format", org.joda.time.format.DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    String MenteeController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
