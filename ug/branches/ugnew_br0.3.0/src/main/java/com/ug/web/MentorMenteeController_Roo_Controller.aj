// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ug.web;

import com.ug.domain.MentorMentee;
import java.io.UnsupportedEncodingException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Collection;
import java.util.Date;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect MentorMenteeController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String MentorMenteeController.create(@Valid MentorMentee mentorMentee, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("mentorMentee", mentorMentee);
            addDateTimeFormatPatterns(uiModel);
            return "mentormentees/create";
        }
        uiModel.asMap().clear();
        mentorMentee.persist();
        return "redirect:/mentormentees/" + encodeUrlPathSegment(mentorMentee.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String MentorMenteeController.createForm(Model uiModel) {
        uiModel.addAttribute("mentorMentee", new MentorMentee());
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String MentorMenteeController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("mentormentee", MentorMentee.findMentorMentee(id));
        uiModel.addAttribute("itemId", id);
        return "mentormentees/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String MentorMenteeController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteeEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) MentorMentee.countMentorMentees() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("mentormentees", MentorMentee.findAllMentorMentees());
        }
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String MentorMenteeController.update(@Valid MentorMentee mentorMentee, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("mentorMentee", mentorMentee);
            addDateTimeFormatPatterns(uiModel);
            return "mentormentees/update";
        }
        uiModel.asMap().clear();
        mentorMentee.merge();
        return "redirect:/mentormentees/" + encodeUrlPathSegment(mentorMentee.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String MentorMenteeController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("mentorMentee", MentorMentee.findMentorMentee(id));
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String MentorMenteeController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        MentorMentee.findMentorMentee(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/mentormentees";
    }
    
    @RequestMapping(params = { "find=ByDeactivationDate", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByDeactivationDateForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/findMentorMenteesByDeactivationDate";
    }
    
    @RequestMapping(params = "find=ByDeactivationDate", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByDeactivationDate(@RequestParam("deactivationDate") @DateTimeFormat(style = "S-") Date deactivationDate, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByDeactivationDate(deactivationDate).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByDeactivationDateBetween", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByDeactivationDateBetweenForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/findMentorMenteesByDeactivationDateBetween";
    }
    
    @RequestMapping(params = "find=ByDeactivationDateBetween", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByDeactivationDateBetween(@RequestParam("minDeactivationDate") @DateTimeFormat(style = "S-") Date minDeactivationDate, @RequestParam("maxDeactivationDate") @DateTimeFormat(style = "S-") Date maxDeactivationDate, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByDeactivationDateBetween(minDeactivationDate, maxDeactivationDate).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByDeactivationDateEquals", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByDeactivationDateEqualsForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/findMentorMenteesByDeactivationDateEquals";
    }
    
    @RequestMapping(params = "find=ByDeactivationDateEquals", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByDeactivationDateEquals(@RequestParam("deactivationDate") @DateTimeFormat(style = "S-") Date deactivationDate, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByDeactivationDateEquals(deactivationDate).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByDeactivationDateGreaterThan", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByDeactivationDateGreaterThanForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/findMentorMenteesByDeactivationDateGreaterThan";
    }
    
    @RequestMapping(params = "find=ByDeactivationDateGreaterThan", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByDeactivationDateGreaterThan(@RequestParam("deactivationDate") @DateTimeFormat(style = "S-") Date deactivationDate, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByDeactivationDateGreaterThan(deactivationDate).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByDeactivationDateGreaterThanEquals", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByDeactivationDateGreaterThanEqualsForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/findMentorMenteesByDeactivationDateGreaterThanEquals";
    }
    
    @RequestMapping(params = "find=ByDeactivationDateGreaterThanEquals", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByDeactivationDateGreaterThanEquals(@RequestParam("deactivationDate") @DateTimeFormat(style = "S-") Date deactivationDate, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByDeactivationDateGreaterThanEquals(deactivationDate).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByDeleted", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByDeletedForm(Model uiModel) {
        return "mentormentees/findMentorMenteesByDeleted";
    }
    
    @RequestMapping(params = "find=ByDeleted", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByDeleted(@RequestParam(value = "deleted", required = false) Boolean deleted, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByDeleted(deleted == null ? new Boolean(false) : deleted).getResultList());
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByDeletedNot", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByDeletedNotForm(Model uiModel) {
        return "mentormentees/findMentorMenteesByDeletedNot";
    }
    
    @RequestMapping(params = "find=ByDeletedNot", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByDeletedNot(@RequestParam(value = "deleted", required = false) Boolean deleted, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByDeletedNot(deleted == null ? new Boolean(false) : deleted).getResultList());
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByFromDate", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByFromDateForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/findMentorMenteesByFromDate";
    }
    
    @RequestMapping(params = "find=ByFromDate", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByFromDate(@RequestParam("fromDate") @DateTimeFormat(style = "S-") Date fromDate, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByFromDate(fromDate).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByFromDateBetween", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByFromDateBetweenForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/findMentorMenteesByFromDateBetween";
    }
    
    @RequestMapping(params = "find=ByFromDateBetween", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByFromDateBetween(@RequestParam("minFromDate") @DateTimeFormat(style = "S-") Date minFromDate, @RequestParam("maxFromDate") @DateTimeFormat(style = "S-") Date maxFromDate, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByFromDateBetween(minFromDate, maxFromDate).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByFromDateEquals", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByFromDateEqualsForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/findMentorMenteesByFromDateEquals";
    }
    
    @RequestMapping(params = "find=ByFromDateEquals", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByFromDateEquals(@RequestParam("fromDate") @DateTimeFormat(style = "S-") Date fromDate, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByFromDateEquals(fromDate).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByFromDateGreaterThan", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByFromDateGreaterThanForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/findMentorMenteesByFromDateGreaterThan";
    }
    
    @RequestMapping(params = "find=ByFromDateGreaterThan", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByFromDateGreaterThan(@RequestParam("fromDate") @DateTimeFormat(style = "S-") Date fromDate, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByFromDateGreaterThan(fromDate).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByFromDateLessThan", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByFromDateLessThanForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/findMentorMenteesByFromDateLessThan";
    }
    
    @RequestMapping(params = "find=ByFromDateLessThan", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByFromDateLessThan(@RequestParam("fromDate") @DateTimeFormat(style = "S-") Date fromDate, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByFromDateLessThan(fromDate).getResultList());
        addDateTimeFormatPatterns(uiModel);
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByMentee", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMenteeForm(Model uiModel) {
        return "mentormentees/findMentorMenteesByMentee";
    }
    
    @RequestMapping(params = "find=ByMentee", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMentee(@RequestParam("mentee") Long mentee, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByMentee(mentee).getResultList());
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByMenteeBetween", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMenteeBetweenForm(Model uiModel) {
        return "mentormentees/findMentorMenteesByMenteeBetween";
    }
    
    @RequestMapping(params = "find=ByMenteeBetween", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMenteeBetween(@RequestParam("minMentee") Long minMentee, @RequestParam("maxMentee") Long maxMentee, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByMenteeBetween(minMentee, maxMentee).getResultList());
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByMenteeEquals", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMenteeEqualsForm(Model uiModel) {
        return "mentormentees/findMentorMenteesByMenteeEquals";
    }
    
    @RequestMapping(params = "find=ByMenteeEquals", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMenteeEquals(@RequestParam("mentee") Long mentee, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByMenteeEquals(mentee).getResultList());
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByMenteeGreaterThan", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMenteeGreaterThanForm(Model uiModel) {
        return "mentormentees/findMentorMenteesByMenteeGreaterThan";
    }
    
    @RequestMapping(params = "find=ByMenteeGreaterThan", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMenteeGreaterThan(@RequestParam("mentee") Long mentee, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByMenteeGreaterThan(mentee).getResultList());
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByMenteeLessThanEquals", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMenteeLessThanEqualsForm(Model uiModel) {
        return "mentormentees/findMentorMenteesByMenteeLessThanEquals";
    }
    
    @RequestMapping(params = "find=ByMenteeLessThanEquals", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMenteeLessThanEquals(@RequestParam("mentee") Long mentee, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByMenteeLessThanEquals(mentee).getResultList());
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByMenteeNotEquals", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMenteeNotEqualsForm(Model uiModel) {
        return "mentormentees/findMentorMenteesByMenteeNotEquals";
    }
    
    @RequestMapping(params = "find=ByMenteeNotEquals", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMenteeNotEquals(@RequestParam("mentee") Long mentee, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByMenteeNotEquals(mentee).getResultList());
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByMentor", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMentorForm(Model uiModel) {
        return "mentormentees/findMentorMenteesByMentor";
    }
    
    @RequestMapping(params = "find=ByMentor", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMentor(@RequestParam("mentor") Long mentor, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByMentor(mentor).getResultList());
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByMentorBetween", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMentorBetweenForm(Model uiModel) {
        return "mentormentees/findMentorMenteesByMentorBetween";
    }
    
    @RequestMapping(params = "find=ByMentorBetween", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMentorBetween(@RequestParam("minMentor") Long minMentor, @RequestParam("maxMentor") Long maxMentor, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByMentorBetween(minMentor, maxMentor).getResultList());
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByMentorEquals", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMentorEqualsForm(Model uiModel) {
        return "mentormentees/findMentorMenteesByMentorEquals";
    }
    
    @RequestMapping(params = "find=ByMentorEquals", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMentorEquals(@RequestParam("mentor") Long mentor, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByMentorEquals(mentor).getResultList());
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByMentorGreaterThan", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMentorGreaterThanForm(Model uiModel) {
        return "mentormentees/findMentorMenteesByMentorGreaterThan";
    }
    
    @RequestMapping(params = "find=ByMentorGreaterThan", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMentorGreaterThan(@RequestParam("mentor") Long mentor, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByMentorGreaterThan(mentor).getResultList());
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByMentorGreaterThanEquals", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMentorGreaterThanEqualsForm(Model uiModel) {
        return "mentormentees/findMentorMenteesByMentorGreaterThanEquals";
    }
    
    @RequestMapping(params = "find=ByMentorGreaterThanEquals", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMentorGreaterThanEquals(@RequestParam("mentor") Long mentor, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByMentorGreaterThanEquals(mentor).getResultList());
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByMentorLessThan", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMentorLessThanForm(Model uiModel) {
        return "mentormentees/findMentorMenteesByMentorLessThan";
    }
    
    @RequestMapping(params = "find=ByMentorLessThan", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMentorLessThan(@RequestParam("mentor") Long mentor, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByMentorLessThan(mentor).getResultList());
        return "mentormentees/list";
    }
    
    @RequestMapping(params = { "find=ByMentorLessThanEquals", "form" }, method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMentorLessThanEqualsForm(Model uiModel) {
        return "mentormentees/findMentorMenteesByMentorLessThanEquals";
    }
    
    @RequestMapping(params = "find=ByMentorLessThanEquals", method = RequestMethod.GET)
    public String MentorMenteeController.findMentorMenteesByMentorLessThanEquals(@RequestParam("mentor") Long mentor, Model uiModel) {
        uiModel.addAttribute("mentormentees", MentorMentee.findMentorMenteesByMentorLessThanEquals(mentor).getResultList());
        return "mentormentees/list";
    }
    
    @ModelAttribute("mentormentees")
    public Collection<MentorMentee> MentorMenteeController.populateMentorMentees() {
        return MentorMentee.findAllMentorMentees();
    }
    
    void MentorMenteeController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("mentorMentee_maxdeactivationdate_date_format", org.joda.time.format.DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("mentorMentee_mindeactivationdate_date_format", org.joda.time.format.DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("mentorMentee_fromdate_date_format", org.joda.time.format.DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("mentorMentee_deactivationdate_date_format", org.joda.time.format.DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("mentorMentee_maxfromdate_date_format", org.joda.time.format.DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("mentorMentee_minfromdate_date_format", org.joda.time.format.DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    String MentorMenteeController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
