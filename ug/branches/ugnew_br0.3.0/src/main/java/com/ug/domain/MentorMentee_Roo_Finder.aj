// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ug.domain;

import com.ug.domain.MentorMentee;
import java.lang.Boolean;
import java.lang.Long;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect MentorMentee_Roo_Finder {
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByAccepted(Boolean accepted) {
        if (accepted == null) throw new IllegalArgumentException("The accepted argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.accepted = :accepted", MentorMentee.class);
        q.setParameter("accepted", accepted);
        return q;
    }
    
    
    public static TypedQuery<MentorMentee> MentorMentee.findAllMentors() {
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentor is not null", MentorMentee.class);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findAllMentees() {
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentee is not null", MentorMentee.class);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByAcceptedDate(Date acceptedDate) {
        if (acceptedDate == null) throw new IllegalArgumentException("The acceptedDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.acceptedDate = :acceptedDate", MentorMentee.class);
        q.setParameter("acceptedDate", acceptedDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByAcceptedDateBetween(Date minAcceptedDate, Date maxAcceptedDate) {
        if (minAcceptedDate == null) throw new IllegalArgumentException("The minAcceptedDate argument is required");
        if (maxAcceptedDate == null) throw new IllegalArgumentException("The maxAcceptedDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.acceptedDate BETWEEN :minAcceptedDate AND :maxAcceptedDate", MentorMentee.class);
        q.setParameter("minAcceptedDate", minAcceptedDate);
        q.setParameter("maxAcceptedDate", maxAcceptedDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByAcceptedDateGreaterThan(Date acceptedDate) {
        if (acceptedDate == null) throw new IllegalArgumentException("The acceptedDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.acceptedDate > :acceptedDate", MentorMentee.class);
        q.setParameter("acceptedDate", acceptedDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByAcceptedDateLessThan(Date acceptedDate) {
        if (acceptedDate == null) throw new IllegalArgumentException("The acceptedDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.acceptedDate < :acceptedDate", MentorMentee.class);
        q.setParameter("acceptedDate", acceptedDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByCreatedDate(Date createdDate) {
        if (createdDate == null) throw new IllegalArgumentException("The createdDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.createdDate = :createdDate", MentorMentee.class);
        q.setParameter("createdDate", createdDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByCreatedDateBetween(Date minCreatedDate, Date maxCreatedDate) {
        if (minCreatedDate == null) throw new IllegalArgumentException("The minCreatedDate argument is required");
        if (maxCreatedDate == null) throw new IllegalArgumentException("The maxCreatedDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.createdDate BETWEEN :minCreatedDate AND :maxCreatedDate", MentorMentee.class);
        q.setParameter("minCreatedDate", minCreatedDate);
        q.setParameter("maxCreatedDate", maxCreatedDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByCreatedDateGreaterThan(Date createdDate) {
        if (createdDate == null) throw new IllegalArgumentException("The createdDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.createdDate > :createdDate", MentorMentee.class);
        q.setParameter("createdDate", createdDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByDeactivationDate(Date deactivationDate) {
        if (deactivationDate == null) throw new IllegalArgumentException("The deactivationDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.deactivationDate = :deactivationDate", MentorMentee.class);
        q.setParameter("deactivationDate", deactivationDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByDeactivationDateBetween(Date minDeactivationDate, Date maxDeactivationDate) {
        if (minDeactivationDate == null) throw new IllegalArgumentException("The minDeactivationDate argument is required");
        if (maxDeactivationDate == null) throw new IllegalArgumentException("The maxDeactivationDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.deactivationDate BETWEEN :minDeactivationDate AND :maxDeactivationDate", MentorMentee.class);
        q.setParameter("minDeactivationDate", minDeactivationDate);
        q.setParameter("maxDeactivationDate", maxDeactivationDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByDeactivationDateEquals(Date deactivationDate) {
        if (deactivationDate == null) throw new IllegalArgumentException("The deactivationDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.deactivationDate = :deactivationDate", MentorMentee.class);
        q.setParameter("deactivationDate", deactivationDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByDeactivationDateGreaterThan(Date deactivationDate) {
        if (deactivationDate == null) throw new IllegalArgumentException("The deactivationDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.deactivationDate > :deactivationDate", MentorMentee.class);
        q.setParameter("deactivationDate", deactivationDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByDeactivationDateGreaterThanEquals(Date deactivationDate) {
        if (deactivationDate == null) throw new IllegalArgumentException("The deactivationDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.deactivationDate >= :deactivationDate", MentorMentee.class);
        q.setParameter("deactivationDate", deactivationDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByDeleted(Boolean deleted) {
        if (deleted == null) throw new IllegalArgumentException("The deleted argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.deleted = :deleted", MentorMentee.class);
        q.setParameter("deleted", deleted);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByDeletedNot(Boolean deleted) {
        if (deleted == null) throw new IllegalArgumentException("The deleted argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.deleted IS NOT :deleted", MentorMentee.class);
        q.setParameter("deleted", deleted);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMentee(Long mentee) {
        if (mentee == null) throw new IllegalArgumentException("The mentee argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentee = :mentee", MentorMentee.class);
        q.setParameter("mentee", mentee);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMenteeBetween(Long minMentee, Long maxMentee) {
        if (minMentee == null) throw new IllegalArgumentException("The minMentee argument is required");
        if (maxMentee == null) throw new IllegalArgumentException("The maxMentee argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentee BETWEEN :minMentee AND :maxMentee", MentorMentee.class);
        q.setParameter("minMentee", minMentee);
        q.setParameter("maxMentee", maxMentee);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMenteeEquals(Long mentee) {
        if (mentee == null) throw new IllegalArgumentException("The mentee argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentee = :mentee", MentorMentee.class);
        q.setParameter("mentee", mentee);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMenteeGreaterThan(Long mentee) {
        if (mentee == null) throw new IllegalArgumentException("The mentee argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentee > :mentee", MentorMentee.class);
        q.setParameter("mentee", mentee);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMenteeLessThanEquals(Long mentee) {
        if (mentee == null) throw new IllegalArgumentException("The mentee argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentee <= :mentee", MentorMentee.class);
        q.setParameter("mentee", mentee);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMenteeNotEquals(Long mentee) {
        if (mentee == null) throw new IllegalArgumentException("The mentee argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentee != :mentee", MentorMentee.class);
        q.setParameter("mentee", mentee);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMentor(Long mentor) {
        if (mentor == null) throw new IllegalArgumentException("The mentor argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentor = :mentor", MentorMentee.class);
        q.setParameter("mentor", mentor);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMentorBetween(Long minMentor, Long maxMentor) {
        if (minMentor == null) throw new IllegalArgumentException("The minMentor argument is required");
        if (maxMentor == null) throw new IllegalArgumentException("The maxMentor argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentor BETWEEN :minMentor AND :maxMentor", MentorMentee.class);
        q.setParameter("minMentor", minMentor);
        q.setParameter("maxMentor", maxMentor);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMentorEquals(Long mentor) {
        if (mentor == null) throw new IllegalArgumentException("The mentor argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentor = :mentor", MentorMentee.class);
        q.setParameter("mentor", mentor);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMentorGreaterThan(Long mentor) {
        if (mentor == null) throw new IllegalArgumentException("The mentor argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentor > :mentor", MentorMentee.class);
        q.setParameter("mentor", mentor);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMentorGreaterThanEquals(Long mentor) {
        if (mentor == null) throw new IllegalArgumentException("The mentor argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentor >= :mentor", MentorMentee.class);
        q.setParameter("mentor", mentor);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMentorLessThan(Long mentor) {
        if (mentor == null) throw new IllegalArgumentException("The mentor argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentor < :mentor", MentorMentee.class);
        q.setParameter("mentor", mentor);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMentorLessThanEquals(Long mentor) {
        if (mentor == null) throw new IllegalArgumentException("The mentor argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentor <= :mentor", MentorMentee.class);
        q.setParameter("mentor", mentor);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMentorNotEquals(Long mentor) {
        if (mentor == null) throw new IllegalArgumentException("The mentor argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentor != :mentor", MentorMentee.class);
        q.setParameter("mentor", mentor);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByRequestInitiatedBy(Long requestInitiatedBy) {
        if (requestInitiatedBy == null) throw new IllegalArgumentException("The requestInitiatedBy argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.requestInitiatedBy = :requestInitiatedBy", MentorMentee.class);
        q.setParameter("requestInitiatedBy", requestInitiatedBy);
        return q;
    }
    
}
