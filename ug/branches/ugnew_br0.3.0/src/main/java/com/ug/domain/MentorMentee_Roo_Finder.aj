// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ug.domain;

import com.ug.domain.MentorMentee;
import java.lang.Boolean;
import java.lang.Long;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect MentorMentee_Roo_Finder {
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByDeactivationDate(Date deactivationDate) {
        if (deactivationDate == null) throw new IllegalArgumentException("The deactivationDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.deactivationDate = :deactivationDate", MentorMentee.class);
        q.setParameter("deactivationDate", deactivationDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByDeactivationDateBetween(Date minDeactivationDate, Date maxDeactivationDate) {
        if (minDeactivationDate == null) throw new IllegalArgumentException("The minDeactivationDate argument is required");
        if (maxDeactivationDate == null) throw new IllegalArgumentException("The maxDeactivationDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.deactivationDate BETWEEN :minDeactivationDate AND :maxDeactivationDate", MentorMentee.class);
        q.setParameter("minDeactivationDate", minDeactivationDate);
        q.setParameter("maxDeactivationDate", maxDeactivationDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByDeactivationDateEquals(Date deactivationDate) {
        if (deactivationDate == null) throw new IllegalArgumentException("The deactivationDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.deactivationDate = :deactivationDate", MentorMentee.class);
        q.setParameter("deactivationDate", deactivationDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByDeactivationDateGreaterThan(Date deactivationDate) {
        if (deactivationDate == null) throw new IllegalArgumentException("The deactivationDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.deactivationDate > :deactivationDate", MentorMentee.class);
        q.setParameter("deactivationDate", deactivationDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByDeactivationDateGreaterThanEquals(Date deactivationDate) {
        if (deactivationDate == null) throw new IllegalArgumentException("The deactivationDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.deactivationDate >= :deactivationDate", MentorMentee.class);
        q.setParameter("deactivationDate", deactivationDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByDeleted(Boolean deleted) {
        if (deleted == null) throw new IllegalArgumentException("The deleted argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.deleted = :deleted", MentorMentee.class);
        q.setParameter("deleted", deleted);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByDeletedNot(Boolean deleted) {
        if (deleted == null) throw new IllegalArgumentException("The deleted argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.deleted IS NOT :deleted", MentorMentee.class);
        q.setParameter("deleted", deleted);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByFromDate(Date fromDate) {
        if (fromDate == null) throw new IllegalArgumentException("The fromDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.fromDate = :fromDate", MentorMentee.class);
        q.setParameter("fromDate", fromDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByFromDateBetween(Date minFromDate, Date maxFromDate) {
        if (minFromDate == null) throw new IllegalArgumentException("The minFromDate argument is required");
        if (maxFromDate == null) throw new IllegalArgumentException("The maxFromDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.fromDate BETWEEN :minFromDate AND :maxFromDate", MentorMentee.class);
        q.setParameter("minFromDate", minFromDate);
        q.setParameter("maxFromDate", maxFromDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByFromDateEquals(Date fromDate) {
        if (fromDate == null) throw new IllegalArgumentException("The fromDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.fromDate = :fromDate", MentorMentee.class);
        q.setParameter("fromDate", fromDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByFromDateGreaterThan(Date fromDate) {
        if (fromDate == null) throw new IllegalArgumentException("The fromDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.fromDate > :fromDate", MentorMentee.class);
        q.setParameter("fromDate", fromDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByFromDateLessThan(Date fromDate) {
        if (fromDate == null) throw new IllegalArgumentException("The fromDate argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.fromDate < :fromDate", MentorMentee.class);
        q.setParameter("fromDate", fromDate);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMentee(Long mentee) {
        if (mentee == null) throw new IllegalArgumentException("The mentee argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentee = :mentee", MentorMentee.class);
        q.setParameter("mentee", mentee);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMenteeBetween(Long minMentee, Long maxMentee) {
        if (minMentee == null) throw new IllegalArgumentException("The minMentee argument is required");
        if (maxMentee == null) throw new IllegalArgumentException("The maxMentee argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentee BETWEEN :minMentee AND :maxMentee", MentorMentee.class);
        q.setParameter("minMentee", minMentee);
        q.setParameter("maxMentee", maxMentee);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMenteeEquals(Long mentee) {
        if (mentee == null) throw new IllegalArgumentException("The mentee argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentee = :mentee", MentorMentee.class);
        q.setParameter("mentee", mentee);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMenteeGreaterThan(Long mentee) {
        if (mentee == null) throw new IllegalArgumentException("The mentee argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentee > :mentee", MentorMentee.class);
        q.setParameter("mentee", mentee);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMenteeLessThanEquals(Long mentee) {
        if (mentee == null) throw new IllegalArgumentException("The mentee argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentee <= :mentee", MentorMentee.class);
        q.setParameter("mentee", mentee);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMenteeNotEquals(Long mentee) {
        if (mentee == null) throw new IllegalArgumentException("The mentee argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentee != :mentee", MentorMentee.class);
        q.setParameter("mentee", mentee);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMentor(Long mentor) {
        if (mentor == null) throw new IllegalArgumentException("The mentor argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentor = :mentor", MentorMentee.class);
        q.setParameter("mentor", mentor);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMentorBetween(Long minMentor, Long maxMentor) {
        if (minMentor == null) throw new IllegalArgumentException("The minMentor argument is required");
        if (maxMentor == null) throw new IllegalArgumentException("The maxMentor argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentor BETWEEN :minMentor AND :maxMentor", MentorMentee.class);
        q.setParameter("minMentor", minMentor);
        q.setParameter("maxMentor", maxMentor);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMentorEquals(Long mentor) {
        if (mentor == null) throw new IllegalArgumentException("The mentor argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentor = :mentor", MentorMentee.class);
        q.setParameter("mentor", mentor);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMentorGreaterThan(Long mentor) {
        if (mentor == null) throw new IllegalArgumentException("The mentor argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentor > :mentor", MentorMentee.class);
        q.setParameter("mentor", mentor);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMentorGreaterThanEquals(Long mentor) {
        if (mentor == null) throw new IllegalArgumentException("The mentor argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentor >= :mentor", MentorMentee.class);
        q.setParameter("mentor", mentor);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMentorLessThan(Long mentor) {
        if (mentor == null) throw new IllegalArgumentException("The mentor argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentor < :mentor", MentorMentee.class);
        q.setParameter("mentor", mentor);
        return q;
    }
    
    public static TypedQuery<MentorMentee> MentorMentee.findMentorMenteesByMentorLessThanEquals(Long mentor) {
        if (mentor == null) throw new IllegalArgumentException("The mentor argument is required");
        EntityManager em = MentorMentee.entityManager();
        TypedQuery<MentorMentee> q = em.createQuery("SELECT MentorMentee FROM MentorMentee AS mentormentee WHERE mentormentee.mentor <= :mentor", MentorMentee.class);
        q.setParameter("mentor", mentor);
        return q;
    }
    
}
