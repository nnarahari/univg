// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ug.domain;

import com.ug.domain.Guarantor;
import com.ug.domain.Loan;
import com.ug.domain.Loanstatus;
import com.ug.domain.User;
import java.math.BigDecimal;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Loan_Roo_Finder {
    
    public static TypedQuery<Loan> Loan.findLoansByGuarantorId(Guarantor guarantorId) {
        if (guarantorId == null) throw new IllegalArgumentException("The guarantorId argument is required");
        EntityManager em = Loan.entityManager();
        TypedQuery<Loan> q = em.createQuery("SELECT Loan FROM Loan AS loan WHERE loan.guarantorId = :guarantorId", Loan.class);
        q.setParameter("guarantorId", guarantorId);
        return q;
    }
    
    public static TypedQuery<Loan> Loan.findLoansByLoanAmount(BigDecimal loanAmount) {
        if (loanAmount == null) throw new IllegalArgumentException("The loanAmount argument is required");
        EntityManager em = Loan.entityManager();
        TypedQuery<Loan> q = em.createQuery("SELECT Loan FROM Loan AS loan WHERE loan.loanAmount = :loanAmount", Loan.class);
        q.setParameter("loanAmount", loanAmount);
        return q;
    }
    
    public static TypedQuery<Loan> Loan.findLoansByLoanNeededBy(Date loanNeededBy) {
        if (loanNeededBy == null) throw new IllegalArgumentException("The loanNeededBy argument is required");
        EntityManager em = Loan.entityManager();
        TypedQuery<Loan> q = em.createQuery("SELECT Loan FROM Loan AS loan WHERE loan.loanNeededBy = :loanNeededBy", Loan.class);
        q.setParameter("loanNeededBy", loanNeededBy);
        return q;
    }
    
    public static TypedQuery<Loan> Loan.findLoansByLoanNeededByBetween(Date minLoanNeededBy, Date maxLoanNeededBy) {
        if (minLoanNeededBy == null) throw new IllegalArgumentException("The minLoanNeededBy argument is required");
        if (maxLoanNeededBy == null) throw new IllegalArgumentException("The maxLoanNeededBy argument is required");
        EntityManager em = Loan.entityManager();
        TypedQuery<Loan> q = em.createQuery("SELECT Loan FROM Loan AS loan WHERE loan.loanNeededBy BETWEEN :minLoanNeededBy AND :maxLoanNeededBy", Loan.class);
        q.setParameter("minLoanNeededBy", minLoanNeededBy);
        q.setParameter("maxLoanNeededBy", maxLoanNeededBy);
        return q;
    }
    
    public static TypedQuery<Loan> Loan.findLoansByLoanOriginDateBetween(Date minLoanOriginDate, Date maxLoanOriginDate) {
        if (minLoanOriginDate == null) throw new IllegalArgumentException("The minLoanOriginDate argument is required");
        if (maxLoanOriginDate == null) throw new IllegalArgumentException("The maxLoanOriginDate argument is required");
        EntityManager em = Loan.entityManager();
        TypedQuery<Loan> q = em.createQuery("SELECT Loan FROM Loan AS loan WHERE loan.loanOriginDate BETWEEN :minLoanOriginDate AND :maxLoanOriginDate", Loan.class);
        q.setParameter("minLoanOriginDate", minLoanOriginDate);
        q.setParameter("maxLoanOriginDate", maxLoanOriginDate);
        return q;
    }
    
    public static TypedQuery<Loan> Loan.findLoansByLoanStatusId(Loanstatus loanStatusId) {
        if (loanStatusId == null) throw new IllegalArgumentException("The loanStatusId argument is required");
        EntityManager em = Loan.entityManager();
        TypedQuery<Loan> q = em.createQuery("SELECT Loan FROM Loan AS loan WHERE loan.loanStatusId = :loanStatusId", Loan.class);
        q.setParameter("loanStatusId", loanStatusId);
        return q;
    }
    
    public static TypedQuery<Loan> Loan.findLoansByUserId(User userId) {
        if (userId == null) throw new IllegalArgumentException("The userId argument is required");
        EntityManager em = Loan.entityManager();
        TypedQuery<Loan> q = em.createQuery("SELECT Loan FROM Loan AS loan WHERE loan.userId = :userId", Loan.class);
        q.setParameter("userId", userId);
        return q;
    }
    
}
