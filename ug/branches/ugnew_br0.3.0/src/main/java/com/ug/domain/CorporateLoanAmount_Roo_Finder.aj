// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ug.domain;

import com.ug.domain.Corporate;
import com.ug.domain.CorporateLoanAmount;
import java.math.BigDecimal;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect CorporateLoanAmount_Roo_Finder {
    
    public static TypedQuery<CorporateLoanAmount> CorporateLoanAmount.findCorporateLoanAmountsByAvailableLoanAmount(BigDecimal availableLoanAmount) {
        if (availableLoanAmount == null) throw new IllegalArgumentException("The availableLoanAmount argument is required");
        EntityManager em = CorporateLoanAmount.entityManager();
        TypedQuery<CorporateLoanAmount> q = em.createQuery("SELECT CorporateLoanAmount FROM CorporateLoanAmount AS corporateloanamount WHERE corporateloanamount.availableLoanAmount = :availableLoanAmount", CorporateLoanAmount.class);
        q.setParameter("availableLoanAmount", availableLoanAmount);
        return q;
    }
    
    public static TypedQuery<CorporateLoanAmount> CorporateLoanAmount.findCorporateLoanAmountsByCommittedLoanAmount(BigDecimal committedLoanAmount) {
        if (committedLoanAmount == null) throw new IllegalArgumentException("The committedLoanAmount argument is required");
        EntityManager em = CorporateLoanAmount.entityManager();
        TypedQuery<CorporateLoanAmount> q = em.createQuery("SELECT CorporateLoanAmount FROM CorporateLoanAmount AS corporateloanamount WHERE corporateloanamount.committedLoanAmount = :committedLoanAmount", CorporateLoanAmount.class);
        q.setParameter("committedLoanAmount", committedLoanAmount);
        return q;
    }
    
    public static TypedQuery<CorporateLoanAmount> CorporateLoanAmount.findCorporateLoanAmountsByCorporateId(Corporate corporateId) {
        if (corporateId == null) throw new IllegalArgumentException("The corporateId argument is required");
        EntityManager em = CorporateLoanAmount.entityManager();
        TypedQuery<CorporateLoanAmount> q = em.createQuery("SELECT CorporateLoanAmount FROM CorporateLoanAmount AS corporateloanamount WHERE corporateloanamount.corporateId = :corporateId", CorporateLoanAmount.class);
        q.setParameter("corporateId", corporateId);
        return q;
    }
    
    public static TypedQuery<CorporateLoanAmount> CorporateLoanAmount.findCorporateLoanAmountsByLoanedAmount(BigDecimal loanedAmount) {
        if (loanedAmount == null) throw new IllegalArgumentException("The loanedAmount argument is required");
        EntityManager em = CorporateLoanAmount.entityManager();
        TypedQuery<CorporateLoanAmount> q = em.createQuery("SELECT CorporateLoanAmount FROM CorporateLoanAmount AS corporateloanamount WHERE corporateloanamount.loanedAmount = :loanedAmount", CorporateLoanAmount.class);
        q.setParameter("loanedAmount", loanedAmount);
        return q;
    }
    
}
