// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ug.domain;

import com.ug.domain.Address;
import java.util.List;
import java.util.Random;
import org.springframework.stereotype.Component;

privileged aspect AddressDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AddressDataOnDemand: @Component;
    
    private Random AddressDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Address> AddressDataOnDemand.data;
    
    public Address AddressDataOnDemand.getNewTransientAddress(int index) {
        com.ug.domain.Address obj = new com.ug.domain.Address();
        java.lang.String displayIdentifier = "displayIdenti_" + index;
        if (displayIdentifier.length() > 15) {
            displayIdentifier  = displayIdentifier.substring(0, 15);
        }
        obj.setDisplayIdentifier(displayIdentifier);
        obj.setDateFrom(new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime());
        obj.setDateTo(new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime());
        obj.setAddressType(com.ug.reference.AddressTypes.class.getEnumConstants()[0]);
        java.lang.String address1 = "address1_" + index;
        if (address1.length() > 50) {
            address1  = address1.substring(0, 50);
        }
        obj.setAddress1(address1);
        java.lang.String address2 = "address2_" + index;
        if (address2.length() > 50) {
            address2  = address2.substring(0, 50);
        }
        obj.setAddress2(address2);
        java.lang.String city = "city_" + index;
        if (city.length() > 50) {
            city  = city.substring(0, 50);
        }
        obj.setCity(city);
        obj.setState(com.ug.reference.State.class.getEnumConstants()[0]);
        java.lang.String zip = "zip_" + index;
        if (zip.length() > 10) {
            zip  = zip.substring(0, 10);
        }
        obj.setZip(zip);
        java.lang.String country = "country_" + index;
        if (country.length() > 20) {
            country  = country.substring(0, 20);
        }
        obj.setCountry(country);
        return obj;
    }
    
    public Address AddressDataOnDemand.getSpecificAddress(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Address obj = data.get(index);
        return Address.findAddress(obj.getId());
    }
    
    public Address AddressDataOnDemand.getRandomAddress() {
        init();
        Address obj = data.get(rnd.nextInt(data.size()));
        return Address.findAddress(obj.getId());
    }
    
    public boolean AddressDataOnDemand.modifyAddress(Address obj) {
        return false;
    }
    
    public void AddressDataOnDemand.init() {
        data = com.ug.domain.Address.findAddressEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Address' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.ug.domain.Address>();
        for (int i = 0; i < 10; i++) {
            com.ug.domain.Address obj = getNewTransientAddress(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
