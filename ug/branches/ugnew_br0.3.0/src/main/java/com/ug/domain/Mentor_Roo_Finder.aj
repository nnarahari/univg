// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ug.domain;

import com.ug.domain.Country;
import com.ug.domain.Gender;
import com.ug.domain.Mentor;
import com.ug.domain.Profession;
import com.ug.domain.User;
import java.lang.Boolean;
import java.lang.String;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Mentor_Roo_Finder {
    
    public static TypedQuery<Mentor> Mentor.findMentorsByCitizenship(Country citizenship) {
        if (citizenship == null) throw new IllegalArgumentException("The citizenship argument is required");
        EntityManager em = Mentor.entityManager();
        TypedQuery<Mentor> q = em.createQuery("SELECT Mentor FROM Mentor AS mentor WHERE mentor.citizenship = :citizenship", Mentor.class);
        q.setParameter("citizenship", citizenship);
        return q;
    }
    
    public static TypedQuery<Mentor> Mentor.findMentorsByCurrentProfession(Profession currentProfession) {
        if (currentProfession == null) throw new IllegalArgumentException("The currentProfession argument is required");
        EntityManager em = Mentor.entityManager();
        TypedQuery<Mentor> q = em.createQuery("SELECT Mentor FROM Mentor AS mentor WHERE mentor.currentProfession = :currentProfession", Mentor.class);
        q.setParameter("currentProfession", currentProfession);
        return q;
    }
    
    public static TypedQuery<Mentor> Mentor.findMentorsByDateOfBirth(Date dateOfBirth) {
        if (dateOfBirth == null) throw new IllegalArgumentException("The dateOfBirth argument is required");
        EntityManager em = Mentor.entityManager();
        TypedQuery<Mentor> q = em.createQuery("SELECT Mentor FROM Mentor AS mentor WHERE mentor.dateOfBirth = :dateOfBirth", Mentor.class);
        q.setParameter("dateOfBirth", dateOfBirth);
        return q;
    }
    
    public static TypedQuery<Mentor> Mentor.findMentorsByDateOfBirthBetween(Date minDateOfBirth, Date maxDateOfBirth) {
        if (minDateOfBirth == null) throw new IllegalArgumentException("The minDateOfBirth argument is required");
        if (maxDateOfBirth == null) throw new IllegalArgumentException("The maxDateOfBirth argument is required");
        EntityManager em = Mentor.entityManager();
        TypedQuery<Mentor> q = em.createQuery("SELECT Mentor FROM Mentor AS mentor WHERE mentor.dateOfBirth BETWEEN :minDateOfBirth AND :maxDateOfBirth", Mentor.class);
        q.setParameter("minDateOfBirth", minDateOfBirth);
        q.setParameter("maxDateOfBirth", maxDateOfBirth);
        return q;
    }
    
    public static TypedQuery<Mentor> Mentor.findMentorsByDateOfBirthGreaterThan(Date dateOfBirth) {
        if (dateOfBirth == null) throw new IllegalArgumentException("The dateOfBirth argument is required");
        EntityManager em = Mentor.entityManager();
        TypedQuery<Mentor> q = em.createQuery("SELECT Mentor FROM Mentor AS mentor WHERE mentor.dateOfBirth > :dateOfBirth", Mentor.class);
        q.setParameter("dateOfBirth", dateOfBirth);
        return q;
    }
    
    public static TypedQuery<Mentor> Mentor.findMentorsByDateOfBirthLessThan(Date dateOfBirth) {
        if (dateOfBirth == null) throw new IllegalArgumentException("The dateOfBirth argument is required");
        EntityManager em = Mentor.entityManager();
        TypedQuery<Mentor> q = em.createQuery("SELECT Mentor FROM Mentor AS mentor WHERE mentor.dateOfBirth < :dateOfBirth", Mentor.class);
        q.setParameter("dateOfBirth", dateOfBirth);
        return q;
    }
    
    public static TypedQuery<Mentor> Mentor.findMentorsByEnabled(Boolean enabled) {
        if (enabled == null) throw new IllegalArgumentException("The enabled argument is required");
        EntityManager em = Mentor.entityManager();
        TypedQuery<Mentor> q = em.createQuery("SELECT Mentor FROM Mentor AS mentor WHERE mentor.enabled = :enabled", Mentor.class);
        q.setParameter("enabled", enabled);
        return q;
    }
    
    public static TypedQuery<Mentor> Mentor.findMentorsByEnabledNot(Boolean enabled) {
        if (enabled == null) throw new IllegalArgumentException("The enabled argument is required");
        EntityManager em = Mentor.entityManager();
        TypedQuery<Mentor> q = em.createQuery("SELECT Mentor FROM Mentor AS mentor WHERE mentor.enabled IS NOT :enabled", Mentor.class);
        q.setParameter("enabled", enabled);
        return q;
    }
    
    public static TypedQuery<Mentor> Mentor.findMentorsByGenderId(Gender genderId) {
        if (genderId == null) throw new IllegalArgumentException("The genderId argument is required");
        EntityManager em = Mentor.entityManager();
        TypedQuery<Mentor> q = em.createQuery("SELECT Mentor FROM Mentor AS mentor WHERE mentor.genderId = :genderId", Mentor.class);
        q.setParameter("genderId", genderId);
        return q;
    }
    
    public static TypedQuery<Mentor> Mentor.findMentorsByHomePhone(String homePhone) {
        if (homePhone == null || homePhone.length() == 0) throw new IllegalArgumentException("The homePhone argument is required");
        EntityManager em = Mentor.entityManager();
        TypedQuery<Mentor> q = em.createQuery("SELECT Mentor FROM Mentor AS mentor WHERE mentor.homePhone = :homePhone", Mentor.class);
        q.setParameter("homePhone", homePhone);
        return q;
    }
    
    public static TypedQuery<Mentor> Mentor.findMentorsByHomePhoneEquals(String homePhone) {
        if (homePhone == null || homePhone.length() == 0) throw new IllegalArgumentException("The homePhone argument is required");
        EntityManager em = Mentor.entityManager();
        TypedQuery<Mentor> q = em.createQuery("SELECT Mentor FROM Mentor AS mentor WHERE mentor.homePhone = :homePhone", Mentor.class);
        q.setParameter("homePhone", homePhone);
        return q;
    }
    
    public static TypedQuery<Mentor> Mentor.findMentorsByHomePhoneLike(String homePhone) {
        if (homePhone == null || homePhone.length() == 0) throw new IllegalArgumentException("The homePhone argument is required");
        homePhone = homePhone.replace('*', '%');
        if (homePhone.charAt(0) != '%') {
            homePhone = "%" + homePhone;
        }
        if (homePhone.charAt(homePhone.length() - 1) != '%') {
            homePhone = homePhone + "%";
        }
        EntityManager em = Mentor.entityManager();
        TypedQuery<Mentor> q = em.createQuery("SELECT Mentor FROM Mentor AS mentor WHERE LOWER(mentor.homePhone) LIKE LOWER(:homePhone)", Mentor.class);
        q.setParameter("homePhone", homePhone);
        return q;
    }
    
    public static TypedQuery<Mentor> Mentor.findMentorsByLoacked(Boolean loacked) {
        if (loacked == null) throw new IllegalArgumentException("The loacked argument is required");
        EntityManager em = Mentor.entityManager();
        TypedQuery<Mentor> q = em.createQuery("SELECT Mentor FROM Mentor AS mentor WHERE mentor.loacked = :loacked", Mentor.class);
        q.setParameter("loacked", loacked);
        return q;
    }
    
    public static TypedQuery<Mentor> Mentor.findMentorsByLoackedNot(Boolean loacked) {
        if (loacked == null) throw new IllegalArgumentException("The loacked argument is required");
        EntityManager em = Mentor.entityManager();
        TypedQuery<Mentor> q = em.createQuery("SELECT Mentor FROM Mentor AS mentor WHERE mentor.loacked IS NOT :loacked", Mentor.class);
        q.setParameter("loacked", loacked);
        return q;
    }
    
    public static TypedQuery<Mentor> Mentor.findMentorsByMobile(String mobile) {
        if (mobile == null || mobile.length() == 0) throw new IllegalArgumentException("The mobile argument is required");
        EntityManager em = Mentor.entityManager();
        TypedQuery<Mentor> q = em.createQuery("SELECT Mentor FROM Mentor AS mentor WHERE mentor.mobile = :mobile", Mentor.class);
        q.setParameter("mobile", mobile);
        return q;
    }
    
    public static TypedQuery<Mentor> Mentor.findMentorsByMobileLike(String mobile) {
        if (mobile == null || mobile.length() == 0) throw new IllegalArgumentException("The mobile argument is required");
        mobile = mobile.replace('*', '%');
        if (mobile.charAt(0) != '%') {
            mobile = "%" + mobile;
        }
        if (mobile.charAt(mobile.length() - 1) != '%') {
            mobile = mobile + "%";
        }
        EntityManager em = Mentor.entityManager();
        TypedQuery<Mentor> q = em.createQuery("SELECT Mentor FROM Mentor AS mentor WHERE LOWER(mentor.mobile) LIKE LOWER(:mobile)", Mentor.class);
        q.setParameter("mobile", mobile);
        return q;
    }
    
    public static TypedQuery<Mentor> Mentor.findMentorsByOpenToAcceptMentee(Boolean openToAcceptMentee) {
        if (openToAcceptMentee == null) throw new IllegalArgumentException("The openToAcceptMentee argument is required");
        EntityManager em = Mentor.entityManager();
        TypedQuery<Mentor> q = em.createQuery("SELECT Mentor FROM Mentor AS mentor WHERE mentor.openToAcceptMentee = :openToAcceptMentee", Mentor.class);
        q.setParameter("openToAcceptMentee", openToAcceptMentee);
        return q;
    }
    
    public static TypedQuery<Mentor> Mentor.findMentorsByOpenToAcceptMenteeNot(Boolean openToAcceptMentee) {
        if (openToAcceptMentee == null) throw new IllegalArgumentException("The openToAcceptMentee argument is required");
        EntityManager em = Mentor.entityManager();
        TypedQuery<Mentor> q = em.createQuery("SELECT Mentor FROM Mentor AS mentor WHERE mentor.openToAcceptMentee IS NOT :openToAcceptMentee", Mentor.class);
        q.setParameter("openToAcceptMentee", openToAcceptMentee);
        return q;
    }
    
    public static TypedQuery<Mentor> Mentor.findMentorsByUserId(User userId) {
        if (userId == null) throw new IllegalArgumentException("The userId argument is required");
        EntityManager em = Mentor.entityManager();
        TypedQuery<Mentor> q = em.createQuery("SELECT Mentor FROM Mentor AS mentor WHERE mentor.userId = :userId", Mentor.class);
        q.setParameter("userId", userId);
        return q;
    }
    
}
